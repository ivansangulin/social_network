datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   String          @id @default(auto()) @map("_id") @db.ObjectId
  username             String          @unique
  email                String          @unique
  password             String
  profile_picture_uuid String?
  locked_profile       Boolean
  friendshipToFriend   Friendship[]    @relation("friendRelation")
  friendshipToUser     Friendship[]    @relation("userRelation")
  posts                Post[]
  user_status          UserStatus?
  friendRequestFrom    FriendRequest[] @relation("fromUser")
  friendRequestTo      FriendRequest[] @relation("toUser")
  Like                 PostLike[]
  Notification         Notification[]
  Comment              Comment[]
  CommentLike          CommentLike[]

  @@map("users")
}

model Friendship {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  user_id   String @db.ObjectId
  user      User   @relation(name: "userRelation", fields: [user_id], references: [id])
  friend_id String @db.ObjectId
  friend    User   @relation(name: "friendRelation", fields: [friend_id], references: [id])

  @@map("friendships")
}

model Post {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  created   DateTime   @default(now())
  user_id   String     @db.ObjectId
  user      User       @relation(fields: [user_id], references: [id])
  parent_id String?    @db.ObjectId
  parent    Post?      @relation(name: "shares", fields: [parent_id], references: [id], onUpdate: NoAction, onDelete: NoAction)
  shares    Post[]     @relation(name: "shares")
  likes     PostLike[]
  comments  Comment[]

  @@map("posts")
}

model PostLike {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  post_id String @db.ObjectId
  post    Post   @relation(fields: [post_id], references: [id])
  user_id String @db.ObjectId
  user    User   @relation(fields: [user_id], references: [id])

  @@map("post_likes")
}

model Comment {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  user_id   String        @db.ObjectId
  user      User          @relation(fields: [user_id], references: [id])
  post_id   String        @db.ObjectId
  post      Post          @relation(fields: [post_id], references: [id])
  text      String
  created   DateTime      @default(now()) @db.Date()
  parent_id String?       @db.ObjectId
  parent    Comment?      @relation(name: "replies", fields: [parent_id], references: [id], onUpdate: NoAction, onDelete: NoAction)
  replies   Comment[]     @relation(name: "replies")
  likes     CommentLike[]

  @@map("comments")
}

model Message {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  created      DateTime  @default(now())
  from_user_id String    @db.ObjectId
  to_user_id   String    @db.ObjectId
  message      String
  read_at      DateTime?

  @@map("messages")
}

model UserStatus {
  user_id     String   @id @map("_id") @db.ObjectId
  user        User     @relation(fields: [user_id], references: [id])
  is_online   Boolean  @default(true)
  last_active DateTime @default(now())

  @@map("user_status")
}

model FriendRequest {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  from_user_id String   @db.ObjectId
  to_user_id   String   @db.ObjectId
  fromUser     User     @relation(name: "fromUser", fields: [from_user_id], references: [id])
  toUser       User     @relation(name: "toUser", fields: [to_user_id], references: [id])
  created      DateTime @default(now())
  read         Boolean  @default(false)
  accepted     Boolean?

  @@map("friend_requests")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id   String   @db.ObjectId
  post_id   String?  @db.ObjectId
  message   String
  created   DateTime @default(now())
  read      Boolean  @default(false)
  sender_id String   @db.ObjectId
  sender    User     @relation(fields: [sender_id], references: [id])

  @@map("notifications")
}

model CommentLike {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  comment_id String  @db.ObjectId
  comment    Comment @relation(fields: [comment_id], references: [id])
  user_id    String  @db.ObjectId
  user       User    @relation(fields: [user_id], references: [id])

  @@map("comment_likes")
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   Int             @id @default(autoincrement())
  username             String          @unique @db.VarChar()
  email                String          @unique @db.VarChar()
  password             String          @db.VarChar()
  profile_picture_uuid String?         @db.VarChar()
  locked_profile       Boolean         @db.Boolean()
  uuid                 String          @unique @db.VarChar()
  friendshipToFriend   Friendship[]    @relation("friendRelation")
  friendshipToUser     Friendship[]    @relation("userRelation")
  posts                Post[]
  user_status          UserStatus?
  friendRequestFrom    FriendRequest[] @relation("fromUser")
  friendRequestTo      FriendRequest[] @relation("toUser")

  @@map("users")
}

model Friendship {
  id        Int  @unique @default(autoincrement())
  user_id   Int  @db.Integer()
  user      User @relation(name: "userRelation", fields: [user_id], references: [id])
  friend_id Int  @db.Integer()
  friend    User @relation(name: "friendRelation", fields: [friend_id], references: [id])

  @@id(name: "friendship_id", [user_id, friend_id])
  @@map("friendships")
}

model Post {
  id       Int       @id @unique @default(autoincrement())
  text     String    @db.VarChar()
  created  DateTime  @default(now()) @db.Timestamptz()
  user_id  Int       @db.Integer()
  user     User      @relation(fields: [user_id], references: [id])
  likes    Like[]
  comments Comment[]

  @@map("posts")
}

model Like {
  id      Int  @id @unique @default(autoincrement())
  post_id Int  @db.Integer()
  post    Post @relation(fields: [post_id], references: [id])
  user_id Int  @db.Integer()

  @@map("likes")
}

model Comment {
  id      Int      @id @unique @default(autoincrement())
  user_id Int      @db.Integer()
  post_id Int      @db.Integer()
  post    Post     @relation(fields: [post_id], references: [id])
  text    String   @db.VarChar()
  created DateTime @default(now()) @db.Date()

  @@map("comments")
}

model Chat {
  id        Int    @unique @default(autoincrement())
  uuid      String @unique @default(uuid()) @db.VarChar()
  user_id   Int    @db.Integer()
  friend_id Int    @db.Integer()

  @@id(name: "chat_id", [user_id, friend_id])
  @@map("chats")
}

model Message {
  id           Int       @id @default(autoincrement())
  created      DateTime  @default(now()) @db.Timestamptz()
  from_user_id Int       @db.Integer()
  to_user_id   Int       @db.Integer()
  message      String    @db.VarChar()
  read_at      DateTime? @db.Timestamptz()

  @@map("messages")
}

model UserStatus {
  user_id     Int      @unique
  user        User     @relation(fields: [user_id], references: [id])
  is_online   Boolean  @default(false) @db.Boolean()
  last_active DateTime @default(now()) @db.Timestamptz()

  @@map("user_status")
}

model FriendRequest {
  id           Int      @id @default(autoincrement())
  from_user_id Int      @db.Integer()
  to_user_id   Int      @db.Integer()
  fromUser     User     @relation(name: "fromUser", fields: [from_user_id], references: [id])
  toUser       User     @relation(name: "toUser", fields: [to_user_id], references: [id])
  created      DateTime @default(now()) @db.Timestamptz()
  read         Boolean  @default(false) @db.Boolean()
  accepted     Boolean? @db.Boolean()

  @@map("friend_requests")
}
